x = "Log10 (Concentração)",
y = "Mortalidade observada e prevista (%)"
) +
annotate("text",
x = lc50_log_ab,
y = 45,
label = paste("LC50 =", format(lc50_conc_ab, digits = 4)),
hjust = -0.1,
vjust = 1,
fontface = "bold",
color = "black") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), expand = c(0, 0)) +
scale_x_continuous(limits = c(x_lim_inferior_ab, x_lim_superior_ab), breaks = seq(-4, 1, 0.5)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
dados_ab <- data.frame(
conc = c(25, 50, 5, 40, 10, 1),
total = c(60, 60, 60, 60, 60, 60),
mortos = c(36, 56, 17, 41, 27, 8)
)
dados_ab$mort_prop <- dados_ab$mortos / dados_ab$total
dados_ab$lconc <- log10(dados_ab$conc)
print("Dados Iniciais:")
print(dados_ab)
modelo_reg_ab <- lm(mort_prop ~ lconc, data = dados_ab)
print(anova(modelo_reg_ab))
print(summary(modelo_reg_ab))
modelo_probit_ab <- glm(
cbind(mortos, total - mortos) ~ lconc,
data = dados_ab,
family = binomial(link = "probit")
)
print(summary(modelo_probit_ab))
pearson_chisq_ab <- sum(residuals(modelo_probit_ab, type = "pearson")^2)
df_chisq_ab <- nrow(dados_ab) - length(coef(modelo_probit_ab))
p_valor_chisq_ab <- pchisq(pearson_chisq_ab, df = df_chisq_ab, lower.tail = FALSE)
cat(paste("Estatística Qui-quadrado de Pearson:", round(pearson_chisq_ab, 4), "\n"))
cat(paste("Graus de Liberdade (DF):", df_chisq_ab, "\n"))
cat(paste("Pr > ChiSq (p-valor):", round(p_valor_chisq_ab, 4), "\n\n"))
probabilidades_ab <- c(
seq(from = 0.01, to = 0.10, by = 0.01),
seq(from = 0.15, to = 0.90, by = 0.05),
seq(from = 0.91, to = 0.99, by = 0.01)
)
cl_log_ab <- dose.p(modelo_probit_ab, p = probabilidades_ab)
erros_padrao_log_ab <- attr(cl_log_ab, "SE")
z_valor_ab <- qnorm(0.975)
limite_inf_log_ab <- cl_log_ab - z_valor_ab * erros_padrao_log_ab
limite_sup_log_ab <- cl_log_ab + z_valor_ab * erros_padrao_log_ab
tabela_escala_log10_ab <- data.frame(
Probabilidade = probabilidades_ab,
Log10_conc = cl_log_ab,
Limite_Inferior_95 = limite_inf_log_ab,
Limite_Superior_95 = limite_sup_log_ab
)
tabela_escala_conc_ab <- data.frame(
Probabilidade = probabilidades_ab,
Concentracao = 10^cl_log_ab,
Limite_Inferior_95 = 10^limite_inf_log_ab,
Limite_Superior_95 = 10^limite_sup_log_ab
)
options(digits = 6)
print(tabela_escala_log10_ab)
print(tabela_escala_conc_ab)
lconc_grafico_ab <- data.frame(lconc = seq(0, max(dados_ab$lconc) + 0.1, length.out = 200))
predicoes_ab <- predict(modelo_probit_ab, newdata = lconc_grafico_ab, type = "link", se.fit = TRUE)
z_valor_ab <- qnorm(0.975)
lconc_grafico_ab$prob_predita_ab <- pnorm(predicoes_ab$fit)
lconc_grafico_ab$prob_superior_ab <- pnorm(predicoes_ab$fit + z_valor_ab * predicoes_ab$se.fit)
lconc_grafico_ab$prob_inferior_ab <- pnorm(predicoes_ab$fit - z_valor_ab * predicoes_ab$se.fit)
lc50_log_ab <- as.numeric(dose.p(modelo_probit_ab, p = 0.50))
lc50_conc_ab <- 10^lc50_log_ab
x_lim_inferior_ab <- -1.5
x_lim_superior_ab <- 1
lconc_grafico_ab <- data.frame(lconc = seq(x_lim_inferior_ab, x_lim_superior_ab, length.out = 200))
predicoes_ab <- predict(modelo_probit_ab, newdata = lconc_grafico_ab, type = "link", se.fit = TRUE)
z_valor_ab <- qnorm(0.975)
lconc_grafico_ab$prob_predita_ab <- pnorm(predicoes_ab$fit)
lconc_grafico_ab$prob_superior_ab <- pnorm(predicoes_ab$fit + z_valor_ab * predicoes_ab$se.fit)
lconc_grafico_ab$prob_inferior <- pnorm(predicoes_ab$fit - z_valor_ab * predicoes_ab$se.fit)
grafico_probit_final_ab <- ggplot() +
geom_ribbon(data = lconc_grafico_ab,
aes(x = lconc, ymin = prob_inferior * 100, ymax = prob_superior_ab * 100),
fill = "skyblue", alpha = 0.5) +
geom_line(data = lconc_grafico_ab,
aes(x = lconc, y = prob_predita * 100),
color = "blue", size = 1) +
geom_point(data = dados_ab,
aes(x = lconc, y = mort_prop * 100),
color = "red", size = 4) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 0.7) +
geom_vline(xintercept = lc50_log_ab, linetype = "dashed", color = "black", size = 0.7) +
labs(
title = "Curva dose-resposta (Modelo Probit) - Abamex",
x = "Log10 (Concentração)",
y = "Mortalidade observada e prevista (%)"
) +
annotate("text",
x = lc50_log_ab,
y = 45,
label = paste("LC50 =", format(lc50_conc_ab, digits = 4)),
hjust = -0.1,
vjust = 1,
fontface = "bold",
color = "black") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), expand = c(0, 0)) +
scale_x_continuous(limits = c(x_lim_inferior_ab, x_lim_superior_ab), breaks = seq(-4, 1, 0.5)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
print(grafico_probit_final_ab)
dados_ab <- data.frame(
conc = c(25, 50, 5, 40, 10, 1),
total = c(60, 60, 60, 60, 60, 60),
mortos = c(36, 56, 17, 41, 27, 8)
)
dados_ab$mort_prop <- dados_ab$mortos / dados_ab$total
dados_ab$lconc <- log10(dados_ab$conc)
print("Dados Iniciais:")
print(dados_ab)
modelo_reg_ab <- lm(mort_prop ~ lconc, data = dados_ab)
print(anova(modelo_reg_ab))
print(summary(modelo_reg_ab))
modelo_probit_ab <- glm(
cbind(mortos, total - mortos) ~ lconc,
data = dados_ab,
family = binomial(link = "probit")
)
print(summary(modelo_probit_ab))
pearson_chisq_ab <- sum(residuals(modelo_probit_ab, type = "pearson")^2)
df_chisq_ab <- nrow(dados_ab) - length(coef(modelo_probit_ab))
p_valor_chisq_ab <- pchisq(pearson_chisq_ab, df = df_chisq_ab, lower.tail = FALSE)
cat(paste("Estatística Qui-quadrado de Pearson:", round(pearson_chisq_ab, 4), "\n"))
cat(paste("Graus de Liberdade (DF):", df_chisq_ab, "\n"))
cat(paste("Pr > ChiSq (p-valor):", round(p_valor_chisq_ab, 4), "\n\n"))
probabilidades_ab <- c(
seq(from = 0.01, to = 0.10, by = 0.01),
seq(from = 0.15, to = 0.90, by = 0.05),
seq(from = 0.91, to = 0.99, by = 0.01)
)
cl_log_ab <- dose.p(modelo_probit_ab, p = probabilidades_ab)
erros_padrao_log_ab <- attr(cl_log_ab, "SE")
z_valor_ab <- qnorm(0.975)
limite_inf_log_ab <- cl_log_ab - z_valor_ab * erros_padrao_log_ab
limite_sup_log_ab <- cl_log_ab + z_valor_ab * erros_padrao_log_ab
tabela_escala_log10_ab <- data.frame(
Probabilidade = probabilidades_ab,
Log10_conc = cl_log_ab,
Limite_Inferior_95 = limite_inf_log_ab,
Limite_Superior_95 = limite_sup_log_ab
)
tabela_escala_conc_ab <- data.frame(
Probabilidade = probabilidades_ab,
Concentracao = 10^cl_log_ab,
Limite_Inferior_95 = 10^limite_inf_log_ab,
Limite_Superior_95 = 10^limite_sup_log_ab
)
options(digits = 6)
print(tabela_escala_log10_ab)
print(tabela_escala_conc_ab)
lconc_grafico_ab <- data.frame(lconc = seq(0, max(dados_ab$lconc) + 0.1, length.out = 200))
predicoes_ab <- predict(modelo_probit_ab, newdata = lconc_grafico_ab, type = "link", se.fit = TRUE)
z_valor_ab <- qnorm(0.975)
lconc_grafico_ab$prob_predita_ab <- pnorm(predicoes_ab$fit)
lconc_grafico_ab$prob_superior_ab <- pnorm(predicoes_ab$fit + z_valor_ab * predicoes_ab$se.fit)
lconc_grafico_ab$prob_inferior_ab <- pnorm(predicoes_ab$fit - z_valor_ab * predicoes_ab$se.fit)
lc50_log_ab <- as.numeric(dose.p(modelo_probit_ab, p = 0.50))
lc50_conc_ab <- 10^lc50_log_ab
x_lim_inferior_ab <- -1.5
x_lim_superior_ab <- 1
lconc_grafico_ab <- data.frame(lconc = seq(x_lim_inferior_ab, x_lim_superior_ab, length.out = 200))
predicoes_ab <- predict(modelo_probit_ab, newdata = lconc_grafico_ab, type = "link", se.fit = TRUE)
z_valor_ab <- qnorm(0.975)
lconc_grafico_ab$prob_predita_ab <- pnorm(predicoes_ab$fit)
lconc_grafico_ab$prob_superior_ab <- pnorm(predicoes_ab$fit + z_valor_ab * predicoes_ab$se.fit)
lconc_grafico_ab$prob_inferior <- pnorm(predicoes_ab$fit - z_valor_ab * predicoes_ab$se.fit)
grafico_probit_final_ab <- ggplot() +
geom_ribbon(data = lconc_grafico_ab,
aes(x = lconc, ymin = prob_inferior * 100, ymax = prob_superior_ab * 100),
fill = "skyblue", alpha = 0.5) +
geom_line(data = lconc_grafico_ab,
aes(x = lconc, y = prob_predita_ab * 100),
color = "blue", size = 1) +
geom_point(data = dados_ab,
aes(x = lconc, y = mort_prop * 100),
color = "red", size = 4) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 0.7) +
geom_vline(xintercept = lc50_log_ab, linetype = "dashed", color = "black", size = 0.7) +
labs(
title = "Curva dose-resposta (Modelo Probit) - Abamex",
x = "Log10 (Concentração)",
y = "Mortalidade observada e prevista (%)"
) +
annotate("text",
x = lc50_log_ab,
y = 45,
label = paste("LC50 =", format(lc50_conc_ab, digits = 4)),
hjust = -0.1,
vjust = 1,
fontface = "bold",
color = "black") +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), expand = c(0, 0)) +
scale_x_continuous(limits = c(x_lim_inferior_ab, x_lim_superior_ab), breaks = seq(-4, 1, 0.5)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
print(grafico_probit_final_ab)
quarto::quarto_render("aplicativo.qmd")
install.packages("quarto")
library(quarto)
hist(residuals(modelo_anova2))
shapiro.test(residuals(modelo_anova2))
shapiro.test(residuals(modelo_anova2))
car::leveneTest(anova2 ~ tratamento, data = dados)
modelo_anova2 <- aov(anscombe ~ tratamento, data = dados)
hist(residuals(modelo_anova2))
shapiro.test(residuals(modelo_anova2))
car::leveneTest(anova2 ~ tratamento, data = dados)
car::leveneTest(anscombe ~ tratamento, data = dados)
kruskal.test(anscombe ~ tratamento, data = dados)
dados <- dados %>%
mutate(
anscombe = asin(sqrt((mortos + 3/8) / (total + 3/4)))
)
library(readxl)
library(ggplot2)
library(tidyverse)
library(scales)
library(forcats)
library(stringr)
library(plotly)
library(readr)
library(emmeans)
library(multcomp)
library(multcompView)
library(DHARMa)
library(car)
library(glmmTMB)
library(lme4)
library(performance)
library(MASS)
dados <- read_excel("teste_lagarta_traça.xlsx")
dados
proporcao_mortos <- dados |>
group_by(tratamento) |>
summarise(
TM = sum(mortos, na.rm = TRUE),
TV = sum(vivos, na.rm = TRUE)
) |>
mutate(
tratamento = str_to_title(tratamento),
PM = TM / (TM + TV)
) |>
ungroup() |>
arrange(PM) |>
mutate(tratamento = factor(tratamento, levels = tratamento))
print(proporcao_mortos)
grafico_proporcao <- ggplot(proporcao_mortos, aes(x = tratamento, y = PM)) +
geom_col(fill = "darkgreen") +
labs(
title = "Proporção de insetos mortos por tratamento",
x = "Tratamentos",
y = "Proporção de mortos"
) +
ylim(0, 1) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
grafico_interativo <- plotly::ggplotly(grafico_proporcao) |>
plotly::config(displayModeBar = FALSE)
grafico_interativo
dados |>
ggplot(aes(repetição, mortos))+
geom_col(fill = "darkgreen")+
labs(x = "Repetições",
y = "Número de insetos mortos")+
theme_bw()+
theme(panel.grid.minor = element_blank())+
scale_y_continuous(limits = c(0, 10), n.breaks = 3)+
facet_wrap(~ tratamento, labeller = labeller(tratamento = tools::toTitleCase))
dados <- dados |>
mutate(
mortalidade = mortos / total)
media_mortalidade <- dados |>
group_by(tratamento) |>
summarise(
mortalidade_media = mean(mortalidade, na.rm = TRUE),
.groups = "drop")
mortalidade_controle <- media_mortalidade |>
filter(grepl("controle", tolower(tratamento))) |>
pull(mortalidade_media)
print(mortalidade_controle)
print(media_mortalidade)
modelo_anova <- aov(mortalidade ~ tratamento, data = dados)
summary(modelo_anova)
hist(residuals(modelo_anova))
plot(simulateResiduals(modelo_anova))
shapiro.test(residuals(modelo_anova))
car::leveneTest(mortalidade ~ tratamento, data = dados)
dados <- dados %>%
mutate(
anscombe = asin(sqrt((mortos + 3/8) / (total + 3/4)))
)
print(dados)
modelo_anova2 <- aov(anscombe ~ tratamento, data = dados)
hist(residuals(modelo_anova2))
shapiro.test(residuals(modelo_anova2))
car::leveneTest(anscombe ~ tratamento, data = dados)
kruskal.test(anscombe ~ tratamento, data = dados)
kruskal.test(mortalidade ~ tratamento, data = dados)
library(dunn.test)
install.packages("dunn.test")
dunn.test(dados$mortalidade, dados$tratamento, method = "holm")
library(dunn.test)
dunn.test(dados$mortalidade, dados$tratamento, method = "holm")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
labs(title = "Mortalidade por Tratamento", y = "Proporção de Mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dunn.test(dados$mortalidade, dados$tratamento, method = "holm")
pvals <- teste_dunn$P.adjusted
teste_dunn <- dunn.test(dados$mortalidade, dados$tratamento, method = "holm")
comparacoes <- teste_dunn$comparisons
pvals <- teste_dunn$P.adjusted
grupos <- unique(as.character(dados$tratamento))
matriz_p <- matrix(1, nrow = length(grupos), ncol = length(grupos),
dimnames = list(grupos, grupos))
for (i in seq_along(comparacoes)) {
par <- unlist(strsplit(comparacoes[i], " - "))
matriz_p[par[1], par[2]] <- pvals[i]
matriz_p[par[2], par[1]] <- pvals[i]
}
letras <- multcompLetters(matriz_p)$Letters
letras_df <- data.frame(tratamento = names(letras), letra = letras)
pos_letras <- dados %>%
group_by(tratamento) %>%
summarise(pos = max(mortalidade, na.rm = TRUE) + 0.05)
letras_plot <- left_join(letras_df, pos_letras, by = "tratamento")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por Tratamento (Teste de Dunn)", y = "Proporção de Mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
letras <- multcompLetters(matriz_p)$LETTERS
letras_df <- data.frame(tratamento = names(letras), letra = letras)
pos_letras <- dados %>%
group_by(tratamento) %>%
summarise(pos = max(mortalidade, na.rm = TRUE) + 0.05)
letras_plot <- left_join(letras_df, pos_letras, by = "tratamento")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
letras <- multcompLetters(matriz_p)$Letters
letras_df <- data.frame(tratamento = names(letras), letra = letras)
pos_letras <- dados %>%
group_by(tratamento) %>%
summarise(pos = max(mortalidade, na.rm = TRUE) + 0.05)
letras_plot <- left_join(letras_df, pos_letras, by = "tratamento")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dados$tratamento <- str_to_title(dados$tratamento)
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
letras <- multcompLetters(matriz_p)$Letters
letras_df <- data.frame(tratamento = names(letras), letra = letras)
pos_letras <- dados %>%
group_by(tratamento) %>%
summarise(pos = max(mortalidade, na.rm = TRUE) + 0.05)
letras_plot <- left_join(letras_df, pos_letras, by = "tratamento")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
comparacoes <- teste_dunn$comparisons
pvals <- teste_dunn$P.adjusted
grupos <- unique(as.character(dados$tratamento))
matriz_p <- matrix(1, nrow = length(grupos), ncol = length(grupos),
dimnames = list(grupos, grupos))
for (i in seq_along(comparacoes)) {
par <- unlist(strsplit(comparacoes[i], " - "))
matriz_p[par[1], par[2]] <- pvals[i]
matriz_p[par[2], par[1]] <- pvals[i]
}
teste_dunn <- dunn.test(dados$mortalidade, dados$tratamento, method = "holm", kw = FALSE)
comparacoes <- teste_dunn$comparisons
pvals <- teste_dunn$P.adjusted
grupos <- unique(as.character(dados$tratamento))
matriz_p <- matrix(1, nrow = length(grupos), ncol = length(grupos),
dimnames = list(grupos, grupos))
for (i in seq_along(comparacoes)) {
par <- unlist(strsplit(comparacoes[i], " - "))
matriz_p[par[1], par[2]] <- pvals[i]
matriz_p[par[2], par[1]] <- pvals[i]
}
# 4. Gerar letras com multcompView
letras <- multcompLetters(matriz_p)$Letters
letras <- multcompLetters(matriz_p)$Letters
letras_df <- data.frame(tratamento = names(letras), letra = letras)
pos_letras <- dados %>%
group_by(tratamento) %>%
summarise(pos = max(mortalidade, na.rm = TRUE) + 0.05)
letras_plot <- left_join(letras_df, pos_letras, by = "tratamento")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por Tratamento (Teste de Dunn)", y = "Proporção de Mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal() +
theme(legend.position = "none")
ggplot(dados, aes(x = tratamento, y = mortalidade, fill = tratamento)) +
geom_boxplot() +
geom_text(data = letras_plot, aes(x = tratamento, y = pos, label = letra),
vjust = 0, size = 5) +
labs(title = "Mortalidade por tratamento (Teste de Dunn)", y = "Proporção de mortalidade") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_minimal() +
theme(legend.position = "none")
comparacoes <- teste_dunn$comparisons
pvals <- teste_dunn$P.adjusted
grupos <- unique(as.character(dados$tratamento))
matriz_p <- matrix(1, nrow = length(grupos), ncol = length(grupos),
dimnames = list(grupos, grupos))
for (i in seq_along(comparacoes)) {
par <- unlist(strsplit(comparacoes[i], " - "))
matriz_p[par[1], par[2]] <- pvals[i]
matriz_p[par[2], par[1]] <- pvals[i]
}
letras <- multcompLetters(matriz_p)$Letters
letras_df <- data.frame(tratamento = names(letras), letra = letras)
summary_ic <- dados %>%
group_by(tratamento) %>%
summarise(
media = mean(mortalidade, na.rm = TRUE),
n = n(),
sd = sd(mortalidade, na.rm = TRUE),
se = sd / sqrt(n),
ic = qt(0.975, df = n - 1) * se
)
plot_df <- summary_ic %>%
left_join(letras_df, by = "tratamento") %>%
mutate(tratamento = str_to_title(tratamento))  # Capitaliza os nomes
ggplot(plot_df, aes(x = tratamento, y = media)) +
geom_errorbar(aes(ymin = media - ic, ymax = media + ic), width = 0.2) +
geom_point(size = 3) +
geom_text(aes(label = letra, y = media + ic + 0.03), size = 5) +
labs(
title = "Mortalidade por Tratamento (Teste de Dunn)",
x = "Tratamento",
y = "Mortalidade"
) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)
)
print(graf_glmm)
ggplot(plot_df, aes(x = tratamento, y = media)) +
geom_errorbar(aes(ymin = media - ic, ymax = media + ic), width = 0.2) +
geom_point(size = 3) +
geom_text(aes(label = letra, y = media + ic + 0.03), size = 5) +
labs(
title = "Mortalidade por Tratamento (Teste de Dunn)",
x = "Tratamento",
y = "Mortalidade"
) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)
)
ggplot(plot_df, aes(x = tratamento, y = media)) +
geom_errorbar(aes(ymin = media - ic, ymax = media + ic), width = 0.2) +
geom_point(size = 3) +
geom_text(aes(label = letra, y = media + ic + 0.03), size = 5) +
labs(
title = "Mortalidade por tratamento (Teste de Dunn)",
x = "Tratamento",
y = "Mortalidade"
) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)
)
